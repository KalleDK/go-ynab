// Code generated by MockGen. DO NOT EDIT.
// Source: endpoint.go

// Package mock_endpoint is a generated GoMock package.
package mock_endpoint

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockGetter is a mock of Getter interface
type MockGetter struct {
	ctrl     *gomock.Controller
	recorder *MockGetterMockRecorder
}

// MockGetterMockRecorder is the mock recorder for MockGetter
type MockGetterMockRecorder struct {
	mock *MockGetter
}

// NewMockGetter creates a new mock instance
func NewMockGetter(ctrl *gomock.Controller) *MockGetter {
	mock := &MockGetter{ctrl: ctrl}
	mock.recorder = &MockGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockGetter) EXPECT() *MockGetterMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockGetter) Get(responseModel interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", responseModel)
	ret0, _ := ret[0].(error)
	return ret0
}

// Get indicates an expected call of Get
func (mr *MockGetterMockRecorder) Get(responseModel interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockGetter)(nil).Get), responseModel)
}

// GetVia mocks base method
func (m *MockGetter) GetVia(path string, responseModel interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVia", path, responseModel)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetVia indicates an expected call of GetVia
func (mr *MockGetterMockRecorder) GetVia(path, responseModel interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVia", reflect.TypeOf((*MockGetter)(nil).GetVia), path, responseModel)
}
